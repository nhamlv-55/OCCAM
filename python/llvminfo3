#!/usr/bin/env python

import sys
from llvmcpy.llvm import *


def main(args):
    if len(args) > 1:
        buffer = create_memory_buffer_with_contents_of_file(sys.argv[1])
        context = get_global_context()
        module = context.parse_ir(buffer)

        if module is None:
            return 0


        callinfo = {}

        for function in module.iter_functions():
            #print(function.get_name())
            if not function.is_declaration():
                calls = 0
                callees = set()
                for bb in function.iter_basic_blocks():
                    for instruction in bb.iter_instructions():
                        if instruction.is_a_call_inst():
                            callee = instruction.get_called().get_name()
                            calls += 1
                            if callee:
                                callees.add(callee)
                            #print(instruction.print_value_to_string())
                            #print(instruction.get_called().get_name())

                callinfo[function.get_name()] = callees


        for fn in callinfo:
            callees = callinfo[fn]
            if callees:
                print("{0}\t{1}".format(fn, callinfo[fn]))

        return 0
    else:
        print("Usage: {0} <llvm bitcode or ir>\n".format(args[0]))
        return 1







if __name__ == '__main__':
    sys.exit(main(sys.argv))
