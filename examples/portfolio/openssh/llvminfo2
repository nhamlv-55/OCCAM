#!/usr/bin/env python

import sys
from llvmcpy.llvm import *

def main(args):
    if len(args) > 1:
        buffer = create_memory_buffer_with_contents_of_file(sys.argv[1])
        context = get_global_context()
        module = context.parse_ir(buffer)

        if module is None:
            return 0

        nfns = 0
        ndcls = 0

        ndefault = 0
        nhidden = 0
        nprotected = 0

        for function in module.iter_functions():
            #print(function.get_name())
            if function.is_declaration():
                ndcls += 1
            else:
                nfns += 1

                v = function.get_visibility()
                if v == DefaultVisibility:
                    ndefault += 1
                elif v == HiddenVisibility:
                    nhidden += 1
                else:
                    nprotected += 1
            #            for bb in function.iter_basic_blocks():
            #                for instruction in bb.iter_instructions():
            #                    instruction.dump()

        print("The number of functions defined: {0}\n".format(nfns))
        print("The number of functions declared: {0}\n".format(ndcls))

        print("The visibility of functions: default = {0} hidden = {1} protected = {2}\n".format(ndefault, nhidden, nprotected))

        ngbls = 0

        for glbl in module.iter_globals():
            ngbls += 1

        print("The number of global variables: {0}\n".format(ngbls))

        return 0
    else:
        print("Usage: {0} <llvm bitcode or ir>\n".format(args[0]))
        return 1


if __name__ == '__main__':
    sys.exit(main(sys.argv))
