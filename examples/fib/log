*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w = alloca i32, align 4
  %z = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %x, i32* %x.addr, align 4, !tbaa !2
  store i32 %y, i32* %y.addr, align 4, !tbaa !2
  %0 = bitcast i32* %w to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3
  %1 = load i32, i32* %y.addr, align 4, !tbaa !2
  %add = add nsw i32 %1, 3
  store i32 %add, i32* %w, align 4, !tbaa !2
  %2 = bitcast i32* %z to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #3
  %3 = load i32, i32* %x.addr, align 4, !tbaa !2
  %sub = sub nsw i32 %3, 5
  store i32 %sub, i32* %z, align 4, !tbaa !2
  %4 = load i32, i32* %z, align 4, !tbaa !2
  %cmp = icmp sge i32 %4, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %z, align 4, !tbaa !2
  %6 = load i32, i32* %z, align 4, !tbaa !2
  %mul = mul nsw i32 %5, %6
  store i32 %mul, i32* %z, align 4, !tbaa !2
  %7 = load i32, i32* %z, align 4, !tbaa !2
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %7)
  %8 = load i32, i32* %z, align 4, !tbaa !2
  store i32 %8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %w, align 4, !tbaa !2
  %10 = load i32, i32* %w, align 4, !tbaa !2
  %mul1 = mul nsw i32 %9, %10
  store i32 %mul1, i32* %w, align 4, !tbaa !2
  %11 = load i32, i32* %w, align 4, !tbaa !2
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %11)
  %12 = load i32, i32* %w, align 4, !tbaa !2
  store i32 %12, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %13 = bitcast i32* %z to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %13) #3
  %14 = bitcast i32* %w to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #3
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w = alloca i32, align 4
  %z = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %x, i32* %x.addr, align 4, !tbaa !2
  store i32 %y, i32* %y.addr, align 4, !tbaa !2
  %0 = bitcast i32* %w to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3
  %1 = load i32, i32* %y.addr, align 4, !tbaa !2
  %add = add nsw i32 %1, 3
  store i32 %add, i32* %w, align 4, !tbaa !2
  %2 = bitcast i32* %z to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #3
  %3 = load i32, i32* %x.addr, align 4, !tbaa !2
  %sub = sub nsw i32 %3, 5
  store i32 %sub, i32* %z, align 4, !tbaa !2
  %4 = load i32, i32* %z, align 4, !tbaa !2
  %cmp = icmp sge i32 %4, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %z, align 4, !tbaa !2
  %6 = load i32, i32* %z, align 4, !tbaa !2
  %mul = mul nsw i32 %5, %6
  store i32 %mul, i32* %z, align 4, !tbaa !2
  %7 = load i32, i32* %z, align 4, !tbaa !2
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %7)
  %8 = load i32, i32* %z, align 4, !tbaa !2
  store i32 %8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %w, align 4, !tbaa !2
  %10 = load i32, i32* %w, align 4, !tbaa !2
  %mul1 = mul nsw i32 %9, %10
  store i32 %mul1, i32* %w, align 4, !tbaa !2
  %11 = load i32, i32* %w, align 4, !tbaa !2
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %11)
  %12 = load i32, i32* %w, align 4, !tbaa !2
  store i32 %12, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %13 = bitcast i32* %z to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %13) #3
  %14 = bitcast i32* %w to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #3
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 5
  %cmp = icmp sge i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 5
  %cmp = icmp sge i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 5
  %cmp = icmp sge i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4, !tbaa !2
  store i8** %argv, i8*** %argv.addr, align 8, !tbaa !6
  %0 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3
  %2 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 1
  %3 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx1, align 1, !tbaa !8
  %conv = sext i8 %4 to i32
  %5 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %call = call i32 @fibo(i32 %conv, i32 %5)
  store i32 %call, i32* %a, align 4, !tbaa !2
  %6 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #3
  %7 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %8 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx2 = getelementptr inbounds i8*, i8** %8, i64 1
  %9 = load i8*, i8** %arrayidx2, align 8, !tbaa !6
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx3, align 1, !tbaa !8
  %conv4 = sext i8 %10 to i32
  %call5 = call i32 @fibo(i32 %7, i32 %conv4)
  store i32 %call5, i32* %b, align 4, !tbaa !2
  %11 = load i32, i32* %a, align 4, !tbaa !2
  %12 = load i32, i32* %b, align 4, !tbaa !2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %11, i32 %12)
  %13 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %13) #3
  %14 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4, !tbaa !2
  store i8** %argv, i8*** %argv.addr, align 8, !tbaa !6
  %0 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3
  %2 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 1
  %3 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx1, align 1, !tbaa !8
  %conv = sext i8 %4 to i32
  %5 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %call = call i32 @fibo(i32 %conv, i32 %5)
  store i32 %call, i32* %a, align 4, !tbaa !2
  %6 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #3
  %7 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %8 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx2 = getelementptr inbounds i8*, i8** %8, i64 1
  %9 = load i8*, i8** %arrayidx2, align 8, !tbaa !6
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx3, align 1, !tbaa !8
  %conv4 = sext i8 %10 to i32
  %call5 = call i32 @fibo(i32 %7, i32 %conv4)
  store i32 %call5, i32* %b, align 4, !tbaa !2
  %11 = load i32, i32* %a, align 4, !tbaa !2
  %12 = load i32, i32* %b, align 4, !tbaa !2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %11, i32 %12)
  %13 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %13) #3
  %14 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %arrayidx1 = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx1, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %arrayidx2 = getelementptr inbounds i8*, i8** %argv, i64 1
  %2 = load i8*, i8** %arrayidx2, align 8, !tbaa !2
  %arrayidx3 = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx3, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %call, i32 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %call, i32 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %call, i32 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}
*** IR Dump After Force set function attributes ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 5
  %cmp = icmp sge i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %call, i32 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Infer set function attributes ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 5
  %cmp = icmp sge i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %call, i32 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Interprocedural Sparse Conditional Constant Propagation ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 5
  %cmp = icmp sge i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %call, i32 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Global Variable Optimizer ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 5
  %cmp = icmp sge i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

declare i32 @printf(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %call, i32 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Promote Memory to Register ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 5
  %cmp = icmp sge i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Promote Memory to Register ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %call, i32 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}
*** IR Dump After Dead Argument Elimination ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 5
  %cmp = icmp sge i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

declare i32 @printf(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i32 %call, i32 %call5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %call, i32 %call5) #2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %call, i32 %call5) #2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Function Integration/Inlining ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After Promote 'by reference' arguments to scalars ***
Printing <null> Function
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Promote 'by reference' arguments to scalars ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Early CSE w/ MemorySSA ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Speculatively execute instructions if target has divergent branches ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Conditionally eliminate dead library calls ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After PGOMemOPSize ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After MergedLoadStoreMotion ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Global Value Numbering ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %call = call i32 @fibo(i32 %conv, i32 %argc)
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %call5 = call i32 @fibo(i32 %argc, i32 %conv4)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %call, i32 %call5) #2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i32 %conv, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i32 %conv, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Promote 'by reference' arguments to scalars ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i32 %conv, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i32 %conv, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Early CSE w/ MemorySSA ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i32 %conv, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Speculatively execute instructions if target has divergent branches ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i32 %conv, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i32 %conv, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i32 %conv, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i32 %conv, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Conditionally eliminate dead library calls ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After PGOMemOPSize ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After MergedLoadStoreMotion ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Global Value Numbering ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Function Integration/Inlining ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After Promote 'by reference' arguments to scalars ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

declare i32 @printf(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Eliminate Available Externally Globals ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

declare i32 @printf(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Deduce function attributes in RPO ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

declare i32 @printf(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Float to int ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop Distribution ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop Load Elimination ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After SLP Vectorizer ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Simplify the CFG more aggressively ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Float to int ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop Distribution ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop Load Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After SLP Vectorizer ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Simplify the CFG more aggressively ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Strip Unused Function Prototypes ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

declare i32 @printf(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Dead Global Elimination ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

declare i32 @printf(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Merge Duplicate Global Constants ***; ModuleID = 'test.o1.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Fibonacci of %d is %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

declare i32 @printf(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.2 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Remove redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @fibo(i32 %x, i32 %y) local_unnamed_addr #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = add nsw i32 %x, -5
  %cmp = icmp sgt i32 %x, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul) #2
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1) #2
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Remove redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 {
entry:
  %cmp = icmp sgt i32 %argc, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1
  %0 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %1 = load i8, i8* %0, align 1, !tbaa !6
  %conv = sext i8 %1 to i32
  %add.i = add nsw i32 %argc, 3
  %sub.i = add nsw i32 %conv, -5
  %cmp.i = icmp sgt i8 %1, 5
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %mul.i = mul nsw i32 %sub.i, %sub.i
  %call.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i) #2
  br label %fibo.exit

if.else.i:                                        ; preds = %if.then
  %mul1.i = mul nsw i32 %add.i, %add.i
  %call2.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i) #2
  br label %fibo.exit

fibo.exit:                                        ; preds = %if.then.i, %if.else.i
  %retval.0.i = phi i32 [ %mul.i, %if.then.i ], [ %mul1.i, %if.else.i ]
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %conv4 = sext i8 %3 to i32
  %add.i6 = add nsw i32 %conv4, 3
  %sub.i7 = add nsw i32 %argc, -5
  %cmp.i8 = icmp sgt i32 %argc, 5
  br i1 %cmp.i8, label %if.then.i11, label %if.else.i14

if.then.i11:                                      ; preds = %fibo.exit
  %mul.i9 = mul nsw i32 %sub.i7, %sub.i7
  %call.i10 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul.i9) #2
  br label %fibo.exit16

if.else.i14:                                      ; preds = %fibo.exit
  %mul1.i12 = mul nsw i32 %add.i6, %add.i6
  %call2.i13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %mul1.i12) #2
  br label %fibo.exit16

fibo.exit16:                                      ; preds = %if.then.i11, %if.else.i14
  %retval.0.i15 = phi i32 [ %mul.i9, %if.then.i11 ], [ %mul1.i12, %if.else.i14 ]
  %call6 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %retval.0.i, i32 %retval.0.i15) #2
  br label %if.end

if.end:                                           ; preds = %fibo.exit16, %entry
  ret i32 0
}
