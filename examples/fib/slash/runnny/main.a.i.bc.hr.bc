; ModuleID = 'slash/runnny/main.a.i.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c" %d  %d  %d\0A\00", align 1
@new_argv = private constant [5 x i8] c"main\00"
@new_argv.1 = private constant [2 x i8] c"a\00"

; Function Attrs: nounwind uwtable
define internal i32 @foo(i32 %x, i32 %y) #0 {
entry:
  %add = add nsw i32 %y, 3
  %sub = sub nsw i32 %x, 50
  %cmp = icmp eq i32 %sub, 47
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %sub, %sub
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul)
  br label %cleanup

if.else:                                          ; preds = %entry
  %mul1 = mul nsw i32 %add, %add
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %mul1)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %mul, %if.then ], [ %mul1, %if.else ]
  ret i32 %retval.0
}

declare i32 @printf(i8*, ...) #1

define i32 @main(i32, i8**) {
entry:
  %2 = icmp eq i32 %0, 2
  br i1 %2, label %entry1, label %incorrect_argc

entry1:                                           ; preds = %entry
  %new_argc = add i32 %0, 1
  %3 = icmp eq i32 %0, 2
  call void @llvm.assume(i1 %3)
  %new_argv = alloca i8*, i32 %new_argc
  %4 = getelementptr i8*, i8** %new_argv, i32 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @new_argv, i32 0, i32 0), i8** %4
  %5 = getelementptr i8*, i8** %new_argv, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @new_argv.1, i32 0, i32 0), i8** %5
  br label %pre_header

incorrect_argc:                                   ; preds = %entry
  ret i32 1

pre_header:                                       ; preds = %entry1
  %6 = alloca i32
  store i32 1, i32* %6
  br label %header

header:                                           ; preds = %body, %pre_header
  %7 = load i32, i32* %6
  %8 = icmp slt i32 %7, %0
  br i1 %8, label %body, label %tail

body:                                             ; preds = %header
  %9 = add i32 1, %7
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8*, i8** %new_argv, i64 %10
  %12 = zext i32 %7 to i64
  %13 = getelementptr inbounds i8*, i8** %1, i64 %12
  %14 = load i8*, i8** %13
  store i8* %14, i8** %11
  %15 = add i32 %7, 1
  store i32 %15, i32* %6
  br label %header

tail:                                             ; preds = %header
  %arrayidx.i = getelementptr inbounds i8*, i8** %new_argv, i64 1
  %16 = load i8*, i8** %arrayidx.i, align 8, !tbaa !2
  %17 = load i8, i8* %16, align 1, !tbaa !6
  %conv.i = sext i8 %17 to i32
  %arrayidx2.i = getelementptr inbounds i8*, i8** %new_argv, i64 2
  %18 = load i8*, i8** %arrayidx2.i, align 8, !tbaa !2
  %19 = load i8, i8* %18, align 1, !tbaa !6
  %conv4.i = sext i8 %19 to i32
  %call.i = call i32 @foo(i32 %conv.i, i32 %conv4.i) #2
  %arrayidx5.i = getelementptr inbounds i8*, i8** %new_argv, i64 2
  %20 = load i8*, i8** %arrayidx5.i, align 8, !tbaa !2
  %21 = load i8, i8* %20, align 1, !tbaa !6
  %conv7.i = sext i8 %21 to i32
  %arrayidx8.i = getelementptr inbounds i8*, i8** %new_argv, i64 1
  %22 = load i8*, i8** %arrayidx8.i, align 8, !tbaa !2
  %23 = load i8, i8* %22, align 1, !tbaa !6
  %conv10.i = sext i8 %23 to i32
  %call11.i = call i32 @foo(i32 %conv7.i, i32 %conv10.i) #2
  %arrayidx12.i = getelementptr inbounds i8*, i8** %new_argv, i64 2
  %24 = load i8*, i8** %arrayidx12.i, align 8, !tbaa !2
  %arrayidx13.i = getelementptr inbounds i8, i8* %24, i64 1
  %25 = load i8, i8* %arrayidx13.i, align 1, !tbaa !6
  %conv14.i = sext i8 %25 to i32
  %arrayidx15.i = getelementptr inbounds i8*, i8** %new_argv, i64 1
  %26 = load i8*, i8** %arrayidx15.i, align 8, !tbaa !2
  %27 = load i8, i8* %26, align 1, !tbaa !6
  %conv17.i = sext i8 %27 to i32
  %call18.i = call i32 @foo(i32 %conv14.i, i32 %conv17.i) #2
  %call19.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i32 %call.i, i32 %call11.i, i32 %call18.i) #2
  ret i32 0
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #2

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 5.0.2 "}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
