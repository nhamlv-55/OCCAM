; ModuleID = 'slash/runnny/main.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c" %d  %d  %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @foo(i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w = alloca i32, align 4
  %z = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 %x, i32* %x.addr, align 4, !tbaa !2
  store i32 %y, i32* %y.addr, align 4, !tbaa !2
  %0 = bitcast i32* %w to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3
  %1 = load i32, i32* %y.addr, align 4, !tbaa !2
  %add = add nsw i32 %1, 3
  store i32 %add, i32* %w, align 4, !tbaa !2
  %2 = bitcast i32* %z to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #3
  %3 = load i32, i32* %x.addr, align 4, !tbaa !2
  %sub = sub nsw i32 %3, 50
  store i32 %sub, i32* %z, align 4, !tbaa !2
  %4 = load i32, i32* %z, align 4, !tbaa !2
  %cmp = icmp eq i32 %4, 47
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %z, align 4, !tbaa !2
  %6 = load i32, i32* %z, align 4, !tbaa !2
  %mul = mul nsw i32 %5, %6
  store i32 %mul, i32* %z, align 4, !tbaa !2
  %7 = load i32, i32* %z, align 4, !tbaa !2
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %7)
  %8 = load i32, i32* %z, align 4, !tbaa !2
  store i32 %8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %w, align 4, !tbaa !2
  %10 = load i32, i32* %w, align 4, !tbaa !2
  %mul1 = mul nsw i32 %9, %10
  store i32 %mul1, i32* %w, align 4, !tbaa !2
  %11 = load i32, i32* %w, align 4, !tbaa !2
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %11)
  %12 = load i32, i32* %w, align 4, !tbaa !2
  store i32 %12, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %13 = bitcast i32* %z to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %13) #3
  %14 = bitcast i32* %w to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #3
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4, !tbaa !2
  store i8** %argv, i8*** %argv.addr, align 8, !tbaa !6
  %0 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3
  %1 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1
  %2 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx1, align 1, !tbaa !8
  %conv = sext i8 %3 to i32
  %4 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx2 = getelementptr inbounds i8*, i8** %4, i64 2
  %5 = load i8*, i8** %arrayidx2, align 8, !tbaa !6
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx3, align 1, !tbaa !8
  %conv4 = sext i8 %6 to i32
  %call = call i32 @foo(i32 %conv, i32 %conv4)
  store i32 %call, i32* %a, align 4, !tbaa !2
  %7 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #3
  %8 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx5 = getelementptr inbounds i8*, i8** %8, i64 2
  %9 = load i8*, i8** %arrayidx5, align 8, !tbaa !6
  %arrayidx6 = getelementptr inbounds i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1, !tbaa !8
  %conv7 = sext i8 %10 to i32
  %11 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx8 = getelementptr inbounds i8*, i8** %11, i64 1
  %12 = load i8*, i8** %arrayidx8, align 8, !tbaa !6
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx9, align 1, !tbaa !8
  %conv10 = sext i8 %13 to i32
  %call11 = call i32 @foo(i32 %conv7, i32 %conv10)
  store i32 %call11, i32* %b, align 4, !tbaa !2
  %14 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #3
  %15 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx12 = getelementptr inbounds i8*, i8** %15, i64 2
  %16 = load i8*, i8** %arrayidx12, align 8, !tbaa !6
  %arrayidx13 = getelementptr inbounds i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx13, align 1, !tbaa !8
  %conv14 = sext i8 %17 to i32
  %18 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx15 = getelementptr inbounds i8*, i8** %18, i64 1
  %19 = load i8*, i8** %arrayidx15, align 8, !tbaa !6
  %arrayidx16 = getelementptr inbounds i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx16, align 1, !tbaa !8
  %conv17 = sext i8 %20 to i32
  %call18 = call i32 @foo(i32 %conv14, i32 %conv17)
  store i32 %call18, i32* %c, align 4, !tbaa !2
  %21 = load i32, i32* %a, align 4, !tbaa !2
  %22 = load i32, i32* %b, align 4, !tbaa !2
  %23 = load i32, i32* %c, align 4, !tbaa !2
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i32 %21, i32 %22, i32 %23)
  %24 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #3
  %25 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #3
  %26 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #3
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 5.0.2 "}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
!8 = !{!4, !4, i64 0}
